{"version":3,"sources":["Components/Form.jsx","Components/Members.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","name","email","role","member","setMember","handleChanges","e","target","value","console","log","onSubmit","preventDefault","addNewMember","style","background","width","htmlFor","id","placeholder","onChange","type","Members","members","map","key","App","teamMembers","setTeamMembers","className","newMember","Date","now","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oPAgCeA,EA9BF,SAACC,GAAW,IAAD,EACQC,mBAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,KAAM,KAD7C,mBACbC,EADa,KACLC,EADK,KAGdC,EAAgB,SAAAC,GAClBF,EAAU,2BAAID,GAAL,kBAAcG,EAAEC,OAAOP,KAAOM,EAAEC,OAAOC,UAEpDC,QAAQC,IAAIP,EAAQ,mBAQpB,OACA,0BAAMQ,SAPa,SAAAL,GACfA,EAAEM,iBACFd,EAAMe,aAAaV,GACnBC,EAAU,CAACJ,KAAM,GAAIC,MAAO,GAAIC,KAAM,MAIdY,MAAO,CAACC,WAAY,UAAWC,MAAO,UAC9D,2BAAOC,QAAQ,QAAf,QACA,2BAAQC,GAAG,OAAQC,YAAY,OAAOnB,KAAK,OAAQQ,MAAOL,EAAOH,KAAMoB,SAAUf,IAEjF,2BAAOY,QAAQ,SAAf,SACA,2BAAOC,GAAG,QAAQC,YAAY,QAAQnB,KAAK,QAAQQ,MAAOL,EAAOF,MAAOmB,SAAUf,IAElF,2BAAOY,QAAQ,QAAf,QACA,2BAAOC,GAAG,OAAOC,YAAY,OAAOnB,KAAK,OAAOQ,MAAOL,EAAOD,KAAMkB,SAAUf,IAE9E,4BAAQgB,KAAK,UAAb,YCXOC,EAdC,SAAAxB,GAChB,OACI,yBAAKgB,MAAO,CAACC,WAAY,QAASC,MAAO,UACxClB,EAAMyB,QAAQC,KAAI,SAAArB,GAAM,OACrB,yBAAKsB,IAAKtB,EAAOe,GAAIJ,MAAO,CAACC,WAAY,YACrC,qCAAWZ,EAAOH,MAClB,qCAAWG,EAAOF,OAClB,oCAAUE,EAAOD,YCiBdwB,MArBf,WAAgB,IAAD,EACyB3B,mBAAS,CAAC,CAACC,KAAM,GAAIC,MAAO,GAAIC,KAAM,MAD/D,mBACNyB,EADM,KACOC,EADP,KAab,OAXAnB,QAAQC,IAAIiB,GAYV,yBAAKE,UAAU,OACb,kBAAC,EAAD,CAAMhB,aAXW,SAAAV,GACnB,IAAM2B,EAAY,CAChBZ,GAAIa,KAAKC,MACThC,KAAMG,EAAOH,KACbC,MAAOE,EAAOF,MACdC,KAAMC,EAAOD,MAEf0B,EAAe,GAAD,mBAAKD,GAAL,CAAkBG,QAK9B,kBAAC,EAAD,CAASP,QAASI,MCTJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.8cdedb65.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst Form = (props) => {\n    const [member, setMember] = useState({name: \"\", email: \"\", role: \"\"})\n\n    const handleChanges = e => {\n        setMember({...member, [e.target.name]: e.target.value});\n    };\n    console.log(member, 'member useState')\n\n    const submitForm = e => {\n        e.preventDefault();\n        props.addNewMember(member);\n        setMember({name: \"\", email: \"\", role: \"\"})\n    }\n\n    return(\n    <form onSubmit={submitForm} style={{background: 'skyblue', width: \"500px\"}}>\n        <label htmlFor=\"name\">Name</label>\n        <input  id=\"name\"  placeholder=\"Name\" name=\"name\"  value={member.name} onChange={handleChanges} />\n\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" placeholder=\"email\" name=\"email\" value={member.email} onChange={handleChanges} />\n\n        <label htmlFor=\"role\">role</label>\n        <input id=\"role\" placeholder=\"role\" name=\"role\" value={member.role} onChange={handleChanges} />\n\n        <button type=\"submit\">Submit</button>\n    </form>\n    )\n}\n\nexport default Form;","import React from \"react\";\n\nconst Members = props => {\nreturn (\n    <div style={{background: \"green\", width: \"500px\"}}>\n    {props.members.map(member => (\n        <div key={member.id} style={{background: 'skyblue'}}>\n            <h2>Name: {member.name}</h2>\n            <p>Email: {member.email}</p>\n            <p>Role: {member.role}</p>\n        </div>\n    ))}\n    </div>\n);\n};\n\nexport default Members;","import React, {useState} from 'react';\nimport './App.css';\nimport Form from \"./Components/Form\"\nimport Members from \"./Components/Members\"\n\nfunction App() {\n  const [teamMembers, setTeamMembers] = useState([{name: \"\", email: \"\", role: \"\"}])\n  console.log(teamMembers)\n\n  const addNewMember = member => {\n    const newMember = {\n      id: Date.now(),\n      name: member.name,\n      email: member.email,\n      role: member.role\n    }\n    setTeamMembers([...teamMembers, newMember])\n  }\n  return (\n    <div className=\"App\">\n      <Form addNewMember={addNewMember}/>\n      <Members members={teamMembers}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}